import { predictManHour } from "../predictManHour";
import '@tensorflow/tfjs-node';

function expectErrorRange(expected: number, actual: number, errorRange = 0.1): void { 
  expect(actual).toBeGreaterThan(expected * (1 - errorRange))
  expect(actual).toBeLessThan(expected* (1 + errorRange))
}

// eslint-disable-next-line jest/expect-expect
describe("IPAの計算結果と一致している", () => { 

  const table = [
    [4081.632653, 3202.639624, 6066.640553, 1690.705173, 20532.71875, 499.5393297],
    [8163.265306,4729.198013,8956.3735,2497.139478,30300.38456,738.1198018],
    [12244.89796,5940.316909,11249.09126,3136.908055,38050.7317,927.3767783],
    [16326.53061,6983.400092,13223.82497,3687.87979,44726.91718,1090.347377],
    [20408.16327,7917.037962,14991.46452,4181.011801,50703.63258,1236.193284],
    [40816.32653,11690.74407,22137.22311,6173.922368,74871.66602,1825.436834],
    [61224.4898,14684.67264,27807.63536,7754.690676,94057.68764,2292.631427],
    [81632.65306,17263.21101,32692.1298,9115.90821,110589.8182,2694.809155],
    [102040.8163,19571.19671,37064.72847,10334.1305,125393.3104,3054.642546],
    [122448.9796,21684.21453,41068.4303,11449.30927,138950.9966,3383.963926],
    [142857.1429,23647.76804,44789.32361,12485.49628,151553.552,3689.896581],
    [163265.3061,25491.82949,48284.11335,13458.53378,163392.442,3977.132373],
    [183673.4694,27237.41021,51592.55161,14379.52751,174601.8932,4248.960314],
    [204081.6327,28899.93114,54743.81417,15256.62822,185280.4226,4507.794231],
    [224489.7959,30491.11638,57760.08288,16096.03261,195502.9328,4755.469213],
    [244897.9592,32020.13224,60658.70055,16902.58544,205327.9881,4993.419935],
    [265306.1224,33494.31021,63453.53864,17680.16159,214802.4316,5222.793839],
    [285714.2857,34919.62592,66155.90348,18431.9193,223964.4455,5444.526123],
    [306122.449,36301.02803,68775.15845,19160.47401,232845.6512,5659.391229],
    [326530.6122,37642.6709,71319.16413,19868.02131,241472.5958,5868.03926],
    [346938.7755,38948.08331,73794.59753,20556.42614,249867.8299,6071.022406],
    [367346.9388,40220.29369,76207.189,21227.28899,258050.7073,6268.814533],
    [387755.102,41461.92464,78561.90108,21881.99587,266037.9892,6461.825995],
    [408163.2653,42675.26571,80863.06615,22521.75672,273844.3088,6650.415015],
    [428571.4286,43862.33009,83114.49369,23147.63545,281482.5335,6834.896563],
    [448979.5918,45024.89943,85319.55514,23760.57359,288964.0512,7015.549374],
    [469387.7551,46164.55973,87481.25173,24361.40925,296298.9998,7192.621563],
    [489795.9184,47282.73035,89602.26935,24950.89249,303496.4524,7366.335166],
    [510204.0816,48380.68766,91685.02338,25529.69779,310564.5681,7536.889842],
    [530612.2449,49459.58456,93731.69558,26098.43436,317510.7173,7704.465932],
    [551020.4082,50520.46669,95744.26475,26657.65475,324341.5849,7869.22699],
    [571428.5714,51564.28599,97724.53239,27207.86198,331063.257,8031.32191],
    [591836.7347,52591.91212,99674.1443,27749.51558,337681.2937,8190.886709],
    [612244.898,53604.14214,101594.6089,28283.03672,344200.7912,8348.046047],
    [632653.0612,54601.70878,103487.3129,28808.81257,350626.4347,8502.914518],
    [653061.2245,55585.28755,105353.5348,29327.20005,356962.5435,8655.59776],
    [673469.3878,56555.50278,107194.4561,29838.52907,363213.1099,8806.193411],
    [693877.551,57512.93303,109011.1718,30343.1053,369381.8335,8954.791941],
    [714285.7143,58458.11557,110804.6988,30841.21263,375472.1501,9101.477365],
    [734693.8776,59391.5505,112575.9835,31333.11529,381487.2581,9246.327883],
    [755102.0408,60313.70425,114325.9088,31819.05973,387430.1402,9389.416423],
    [775510.2041,61225.01268,116055.2995,32299.27623,393303.584,9530.811135],
    [795918.3673,62125.88385,117764.9281,32773.98038,399110.1994,9670.57582],
    [816326.5306,63016.70043,119455.5188,33243.37438,404852.434,9808.770309],
    [836734.6939,63897.82193,121127.752,33707.64815,410532.587,9945.450802],
    [857142.8571,64769.58654,122782.268,34166.98037,416152.8219,10080.67018],
    [877551.0204,65632.31296,124419.6698,34621.53943,421715.177,10214.47825],
    [897959.1837,66486.30189,126040.5267,35071.48418,427221.576,10346.92204],
    [918367.3469,67331.83746,127645.3765,35516.96474,432673.8362,10478.04595],
    [938775.5102,68169.18848,129234.7279,35958.12311,438073.6774,10607.892],
    [959183.6735,68998.60956,130809.063,36395.09382,443422.7283,10736.5],
    [979591.8367,69820.34218,132368.8388,36828.00443,448722.5338,10863.90768],
    [1000000, 70634.61561, 133914.4893, 37256.97606, 453974.5607, 10990.15089]
  ]
    

  // eslint-disable-next-line jest/expect-expect
  test.each(table)("SLOC %f => ManHour", (loc, median, p50Upper, p50Lower, p95Upper, p95Lower) => { 
    const errorRange = 0.05;
    const manHourSamplingCount = 10000;
    const seed = 1;
    const s = predictManHour(loc, manHourSamplingCount, seed);
    expectErrorRange(s.median,   median,   errorRange);
    expectErrorRange(s.p50Upper, p50Upper, errorRange);
    expectErrorRange(s.p50Lower, p50Lower, errorRange);
    expectErrorRange(s.p95Upper, p95Upper, errorRange);
    expectErrorRange(s.p95Lower, p95Lower, errorRange);
  })
})